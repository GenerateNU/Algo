name: CI (Linting, Testing, Building)

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        go-version: [1.21.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: 'Create env file'
        run: |
          touch .env
          cat .env

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Linters
        run: |
          cd backend
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Lint Go code
        run: make backend-lint

      - name: Install frontend linters
        run: |
          cd frontend
          yarn install

      - name: Lint Frontend code
        run: make frontend-lint
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        go-version: [1.21.x]
    container: node:latest

    services:
      postgres:
        image: postgres:14.1-alpine
        env:
          POSTGRES_PASSWORD: pwd
          POSTGRES_USER: user
          POSTGRES_DB: algo
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install PostgreSQL client
        run: |
          apt-get update
          apt-get install --yes postgresql-client
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: 'Create env file'
        run: |
          touch .env
          cat .env

      - name: Debugging
        run: |
          pwd
          ls -l ./backend/src/db/migrations/

      - name: Import DB seed data
        run: |
          for file in $(ls -1 ./backend/src/db/migrations/ | sort); do
            psql -d postgresql://user:pwd@172.17.0.1:5432/algo -f "$file"
          done
        working-directory: ./backend/src/db/migrations

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run Go tests
        run: |
          make backend-test
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        go-version: [1.21.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Create env file'
        run: |
          touch .env
          cat .env

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build Go app
        run: |
          cd backend 
          go build -v